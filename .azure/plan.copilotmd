# Azure Deployment Plan for doce-code256-landing Project

## **Goal**
Deploy the Doce-Code256 React landing page project to Azure using Azure Developer CLI (AZD) with Azure App Service hosting.

## **Project Information**
**Doce-Code256 Landing Page**
- **Stack**: React 18.2.0 + Vite 5.0.8 (Node.js)
- **Type**: Static landing page for web development services
- **Build System**: Vite with modern ES modules
- **Dependencies**: None (self-contained React app)
- **Hosting**: Azure App Service (Node.js runtime)
- **Port**: 3000 (development), 80/443 (production)

## **Azure Resources Architecture**
> **Install the mermaid extension in IDE to view the architecture.**

See `.azure/architecture.copilotmd` for detailed architecture diagram.

**Resource Relations:**
- The App Service hosts the React application build output
- Static assets (SVG portfolio images) are served directly from the App Service
- No external dependencies or databases required
- Contact functionality uses client-side WhatsApp/email integration

## **Recommended Azure Resources**

**Application doce-code256-landing:**
- **Hosting Service Type**: Azure App Service
- **SKU**: F1 (Free Tier) - Perfect for landing pages
  - 1 GB RAM, shared compute
  - 1 GB storage
  - Custom domain support
  - SSL included
- **Configuration**:
  - **Language**: Node.js 18+ 
  - **Build Command**: `npm run build`
  - **Start Command**: `npm run preview` (serves built files)
  - **Environment Variables**: 
    - `NODE_ENV=production`
    - `PORT=80`

**Dependencies Resource**: None required

## **Recommended Supporting Services**:
- **Application Insights**: Monitor performance and user analytics
- **Log Analytics Workspace**: Centralized logging for troubleshooting
- **User-Assigned Managed Identity**: Secure access management (future-proofing)

## **Recommended Security Configurations**:
- **HTTPS Only**: Force SSL/TLS encryption
- **Custom Domain**: Optional - can add custom domain later
- **Managed Identity**: For future integration with Azure services
- **CORS**: Configure if needed for external API calls

## **Execution Steps**
> **Below are the steps for Copilot to follow; ask Copilot to update or execute this plan. Add check list for the steps.**

### **Execution Steps:**

1. **Provision Azure Infrastructure with AZD:**
   - [ ] **Provisioning tool**: AZD
   - [ ] **Expected files**: `azure.yaml`, `infra/main.bicep`, `infra/main.parameters.json`
   - [ ] Check subscription and get available regions using `appmod-get-regions-with-sufficient-quota`
   - [ ] **Missing files**: Generate all AZD infrastructure files
   - [ ] Get IaC rules using `appmod-get-iac-rules` for proper file generation
   - [ ] **Generating Files**: `azure.yaml`, `infra/main.bicep`, `infra/main.parameters.json`
   - [ ] Run `azd provision --preview --no-prompt` for dry run validation
   - [ ] Fix any bicep errors using `get_errors` tool

2. **Environment Setup for AZD:**
   - [ ] Install AZ CLI and AZD (if not installed)
   - [ ] Run `azd env new doce-code256-env --no-prompt` to create environment
   - [ ] Set required environment variables:
     - [ ] `AZURE_SUBSCRIPTION_ID` (use default subscription)
     - [ ] `AZURE_LOCATION` (from available regions)
   - [ ] Verify resource group configuration

3. **Deployment:**
   - [ ] **AZD App Deployment**:
     - [ ] Run `azd up --no-prompt` for full deployment
     - [ ] Monitor for errors and retry if needed
     - [ ] If region change needed: `azd down --force --no-prompt` then redeploy
   - [ ] **Deployment Validation**:
     - [ ] Check application logs with `appmod-get-azd-app-logs`
     - [ ] Verify website is accessible and functional
     - [ ] Test WhatsApp links and contact functionality

4. **Summarize Deployment Result:**
   - [ ] Use `appmod-summarize-result` tool for deployment summary
   - [ ] **Generating files**: `.azure/summary.copilotmd`
   - [ ] Document final URL and access instructions

## **Progress Tracking**
- Copilot must create and update `.azure/progress.copilotmd` after each step
- Progress should include:
  - ‚úÖ Completed tasks
  - üî≤ Pending tasks  
  - ‚ùå Failed tasks with error notes

**Example format:**
- [x] Project structure analyzed (React + Vite detected)
- [ ] Infrastructure provisioning in progress
  - Attempt 1: Checking available regions...
  - Region selected: East US 2
- [ ] Deployment pending